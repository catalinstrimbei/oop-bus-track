/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormOperatiuniContabile.java
 *
 * Created on Sep 15, 2010, 9:54:14 PM
 */

package app.contabilitate.ui;

import app.model.contabilitate.InregistrareContabila;
import app.model.contabilitate.InregistrareCredit;
import app.model.contabilitate.InregistrareDebit;
import app.model.contabilitate.OperatiuneContabila;
import app.model.contabilitate.RegistruOperatiuni;
import app.model.contabilitate.conturi.Cont;
import java.awt.Component;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.AbstractCellEditor;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author catalin.strimbei
 */
public class FormOperatiuniContabile extends javax.swing.JFrame {
    private RegistruOperatiuni registruOperatiuni;

    // DataModel Master ---------------------------------------------
    private List<OperatiuneContabila> operatiuni = new ArrayList<OperatiuneContabila>();
    private OperatiuneContabila operatiuneContabila;
    private List<Cont> conturi = new ArrayList<Cont>();
    // Suport model date - grid detalii -----------------------------
    private InregistrareContabila inregistrareContabila;

    // Suport editare grid
    private TableColumnEditor contCellEditor;

    private java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yyyy");

    /** Creates new form FormOperatiuniContabile */
    public FormOperatiuniContabile() {

        // creare entity manager
        EntityManagerFactory emf = Persistence.
                createEntityManagerFactory("EntitatiContabilitate");
        EntityManager em = emf.createEntityManager();
        
        // initializare registru
        registruOperatiuni = new RegistruOperatiuni(em);

        initComponents();

        initFormDataModel();

        
        // refresh pe formular
        this.bindingGroup.unbind();
        this.bindingGroup.bind();
        this.lstOperatiuni.setSelectedIndex(0);

        initTableCellEditors();

    }

	private void initFormDataModel(){
            this.operatiuni.addAll(this.registruOperatiuni.getOperatiuni());

            if (!this.operatiuni.isEmpty()){
                    Collections.sort(this.operatiuni);
                    this.operatiuneContabila = this.operatiuni.get(0);
            }
            this.conturi.addAll(this.registruOperatiuni.getConturi());
	}


        private DecimalFormat decimalFormat = new DecimalFormat("0.00");
        private void initTableCellEditors(){
            this.contCellEditor = new TableColumnEditor(cboCont);
            tblInregistrari.getColumnModel().getColumn(1).setCellEditor(contCellEditor);
            //tblInregistrari.getColumnModel().getColumn(1).setCellRenderer(contCellEditor);
            cboCont.setVisible(false);
            
            TableColumnEditor sumaCellEditor = new TableColumnEditor(txtSuma);
            tblInregistrari.getColumnModel().getColumn(2).setCellEditor(sumaCellEditor);
            //tblInregistrari.getColumnModel().getColumn(2).setCellRenderer(sumaCellEditor);
            txtSuma.setVisible(false);

            this.tblInregistrari.revalidate();
            this.tblInregistrari.repaint();

        }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        cboCont = new javax.swing.JComboBox();
        txtSuma = new javax.swing.JFormattedTextField(decimalFormat);
        jScrollPane1 = new javax.swing.JScrollPane();
        lstOperatiuni = new javax.swing.JList();
        txtID = new javax.swing.JTextField();
        txtDataContabilizare = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAbandon = new javax.swing.JButton();
        btnSalveaza = new javax.swing.JButton();
        btnOpNoua = new javax.swing.JToggleButton();
        btnStergeOp = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInregistrari = new javax.swing.JTable();
        btnStergeInregistrare = new javax.swing.JButton();
        btnAdaugareCredit = new javax.swing.JButton();
        btnAdaugareDebit = new javax.swing.JButton();

        cboCont.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conturi}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, cboCont);
        bindingGroup.addBinding(jComboBoxBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tblInregistrari, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.cont}"), cboCont, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tblInregistrari, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.suma}"), txtSuma, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Formular Operatiuni Contabile");

        lstOperatiuni.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${operatiuni}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, lstOperatiuni);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${idOperatiune}"));
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${operatiuneContabila}"), lstOperatiuni, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(lstOperatiuni);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lstOperatiuni, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.idOperatiune}"), txtID, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lstOperatiuni, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.dataContabilizare}"), txtDataContabilizare, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jLabel1.setText("Nr.op./ID");

        jLabel2.setText("Data");

        btnAbandon.setText("Abandon");
        btnAbandon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbandonActionPerformed(evt);
            }
        });

        btnSalveaza.setText("Salveaza");
        btnSalveaza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalveazaActionPerformed(evt);
            }
        });

        btnOpNoua.setText("Op. noua");
        btnOpNoua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpNouaActionPerformed(evt);
            }
        });

        btnStergeOp.setText("Sterge op.");
        btnStergeOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStergeOpActionPerformed(evt);
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${selectedElement.inregistrari}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, lstOperatiuni, eLProperty, tblInregistrari, "tblInregistrariElements");
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nrOrdine}"));
        columnBinding.setColumnName("Nr Ordine");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cont}"));
        columnBinding.setColumnName("Cont");
        columnBinding.setColumnClass(app.model.contabilitate.conturi.Cont.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${suma}"));
        columnBinding.setColumnName("Suma");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tip}"));
        columnBinding.setColumnName("Tip");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${inregistrareContabila}"), tblInregistrari, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(tblInregistrari);

        btnStergeInregistrare.setText("Sterge inregistrare");
        btnStergeInregistrare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStergeInregistrareActionPerformed(evt);
            }
        });

        btnAdaugareCredit.setText("Adauga Credit");
        btnAdaugareCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdaugareCreditActionPerformed(evt);
            }
        });

        btnAdaugareDebit.setText("Adauga Debit");
        btnAdaugareDebit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdaugareDebitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataContabilizare, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(btnSalveaza, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnAbandon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStergeOp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOpNoua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(btnAdaugareDebit, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdaugareCredit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStergeInregistrare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnOpNoua)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(btnStergeOp)
                            .addComponent(txtDataContabilizare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAbandon)
                            .addComponent(btnSalveaza))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStergeInregistrare)
                    .addComponent(btnAdaugareCredit)
                    .addComponent(btnAdaugareDebit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStergeOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStergeOpActionPerformed
        // preconditii
        if (this.operatiuneContabila == null)
                return;
        // tranzactia cu suportul de persistenta
        this.registruOperatiuni.removeOperatiuneContabila(this.operatiuneContabila);

        // actualizare model
        this.operatiuni.remove(this.operatiuneContabila);
        this.operatiuneContabila = this.operatiuni.get(0);

        this.bindingGroup.unbind();
        this.bindingGroup.bind();
        if (!this.operatiuni.isEmpty()){
            this.lstOperatiuni.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btnStergeOpActionPerformed

    private void btnAdaugareDebitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdaugareDebitActionPerformed
            // preconditii
            if (this.operatiuneContabila == null)
                    return;

            // tranzactia cu suportul de persistenta
            // -- nu e necesar

            // actualizare model
            this.inregistrareContabila = new InregistrareDebit(this.conturi.get(0), 0.0);
            this.operatiuneContabila.addInregistrareContabila(this.inregistrareContabila);

            this.bindingGroup.getBinding("tblInregistrariElements").unbind();
            this.bindingGroup.getBinding("tblInregistrariElements").bind();
    }//GEN-LAST:event_btnAdaugareDebitActionPerformed

    private void btnAdaugareCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdaugareCreditActionPerformed
            // preconditii
            if (this.operatiuneContabila == null)
                    return;

            // tranzactia cu suportul de persistenta
            // -- nu e necesar

            // actualizare model
            this.inregistrareContabila = new InregistrareCredit(this.conturi.get(0), 0.0);
            this.operatiuneContabila.addInregistrareContabila(this.inregistrareContabila);

            this.bindingGroup.getBinding("tblInregistrariElements").unbind();
            this.bindingGroup.getBinding("tblInregistrariElements").bind();
    }//GEN-LAST:event_btnAdaugareCreditActionPerformed

    private void btnStergeInregistrareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStergeInregistrareActionPerformed
		// preconditii
		if (this.operatiuneContabila == null)
			return;
		if (this.inregistrareContabila == null)
			return;

		// tranzactia cu suportul de persistenta
		// -- nu e necesar

		// actualizare model
		this.operatiuneContabila.removeInregistrareContabila(this.inregistrareContabila);

            this.bindingGroup.getBinding("tblInregistrariElements").unbind();
            this.bindingGroup.getBinding("tblInregistrariElements").bind();
    }//GEN-LAST:event_btnStergeInregistrareActionPerformed

    private void btnOpNouaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpNouaActionPerformed
            // preconditii
            // - fara (deocamdata)

            // tranzactia cu suportul de persistenta
            // - nu e necesara

            // actualizare model
            this.operatiuneContabila = new OperatiuneContabila();
            this.operatiuneContabila.setIdOperatiune(9999);
            this.operatiuneContabila.setDataContabilizare(new Date());

        // refresh pe formular
        this.bindingGroup.unbind();
        this.bindingGroup.bind();
        lstOperatiuni.setSelectedValue("9999", true); // 4
    }//GEN-LAST:event_btnOpNouaActionPerformed

    private void btnSalveazaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalveazaActionPerformed
            // preconditii
            if (this.operatiuneContabila == null)
                return;
            // tranzactia cu suportul de persistenta
            this.registruOperatiuni.addOperatiuneContabila(this.operatiuneContabila);
    }//GEN-LAST:event_btnSalveazaActionPerformed

    private void btnAbandonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbandonActionPerformed
        // preconditii
        if (this.operatiuneContabila == null)
                return;
        this.registruOperatiuni.refreshOperatiune(this.operatiuneContabila);

        // refresh pe formular
        String elementCurent = this.operatiuneContabila.getIdOperatiune().toString();
        this.bindingGroup.unbind();
        this.bindingGroup.bind();
        this.lstOperatiuni.setSelectedValue(elementCurent, true);
    }//GEN-LAST:event_btnAbandonActionPerformed

//        int idx = this.tblInregistrari.getSelectedRow();
//        if (idx >= 0){
//            this.bindingGroup.getBinding("tblInregistrariElements").unbind();
//            this.bindingGroup.getBinding("tblInregistrariElements").bind();
//            this.tblInregistrari.setRowSelectionInterval(idx, idx);
//            System.out.println("IDx = " + idx);
//        }
    /**
    * @param args the command line argumenths
    */
    public static void main(String args[]) {
        // Asigurarea look and feel-ului implicit al S.O.
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex){}

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormOperatiuniContabile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbandon;
    private javax.swing.JButton btnAdaugareCredit;
    private javax.swing.JButton btnAdaugareDebit;
    private javax.swing.JToggleButton btnOpNoua;
    private javax.swing.JButton btnSalveaza;
    private javax.swing.JButton btnStergeInregistrare;
    private javax.swing.JButton btnStergeOp;
    private javax.swing.JComboBox cboCont;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstOperatiuni;
    private javax.swing.JTable tblInregistrari;
    private javax.swing.JFormattedTextField txtDataContabilizare;
    private javax.swing.JTextField txtID;
    private javax.swing.JFormattedTextField txtSuma;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public List<Cont> getConturi() {
        return conturi;
    }

    public void setConturi(List<Cont> conturi) {
        this.conturi = conturi;
    }

    public InregistrareContabila getInregistrareContabila() {
        return inregistrareContabila;
    }

    public void setInregistrareContabila(InregistrareContabila inregistrareContabila) {
        this.inregistrareContabila = inregistrareContabila;
    }

    public OperatiuneContabila getOperatiuneContabila() {
        return operatiuneContabila;
    }

    public void setOperatiuneContabila(OperatiuneContabila operatiuneContabila) {
        this.operatiuneContabila = operatiuneContabila;
    }

    public List<OperatiuneContabila> getOperatiuni() {
        return operatiuni;
    }

    public void setOperatiuni(List<OperatiuneContabila> operatiuni) {
        this.operatiuni = operatiuni;
    }

    public TableColumnEditor getContCellEditor() {
        return contCellEditor;
    }
    
}
class TableColumnEditor
        extends AbstractCellEditor implements TableCellEditor {

    private JComponent component;

    public TableColumnEditor(JComponent component) {
        this.component = component;
    }

    public JComponent getComponent() {
        return component;
    }
    public void setComponent(JComponent component) {
        this.component = component;
    }
    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int rowIndex, int vColIndex) {
        component.setVisible(true);
        return component;
    }
    public Object getCellEditorValue() {
        if (component instanceof JComboBox){
            return ((JComboBox)getComponent()).getSelectedItem();
        }
        if (component instanceof JFormattedTextField){
            return ((JFormattedTextField)getComponent()).getValue();
        }

        return null;
    }

    /*
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {

        if (component instanceof JComboBox){
            ((JComboBox)getComponent()).setSelectedItem(value);
        }

        if (component instanceof JFormattedTextField){
            ((JFormattedTextField)getComponent()).setValue(value);
        }

        return component;
    }*/
}
